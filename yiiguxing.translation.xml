<application>
  <component name="AppStorage">
    <histories>
      <item value="&#10;SQL Server 2019 will run as non-root by default.&#10;This container is running as user root.&#10;To learn more visit https://go.microsoft.com/fwlink/?linkid=2099216.&#10;The SQL Server End-User License Agreement (EULA) must be accepted before SQL&#10;&#10;Server can start. The license terms for this product can be downloaded from&#10;&#10;http://go.microsoft.com/fwlink/?LinkId=746388.&#10;&#10;&#10;You can accept the EULA by specifying the --accept-eula command line option,&#10;&#10;setting the ACCEPT_EULA environment variable, or using the mssql-conf tool." />
      <item value="max Sessions Prevents Login" />
      <item value="/**&#10;&#9; * Creates a matcher with the supplied pattern which will match the specified Http&#10;&#9; * method&#10;&#9; *&#10;&#9; * @param pattern the ant pattern to use for matching&#10;&#9; * @param httpMethod the HTTP method. The {@code matches} method will return false if&#10;&#9; * the incoming request doesn't doesn't have the same method.&#10;&#9; * @param caseSensitive true if the matcher should consider case, else false&#10;&#9; */" />
      <item value="/**&#10;&#9; * Creates a matcher with the supplied pattern and HTTP method in a case insensitive&#10;&#9; * manner.&#10;&#9; *&#10;&#9; * @param pattern the ant pattern to use for matching&#10;&#9; * @param httpMethod the HTTP method. The {@code matches} method will return false if&#10;&#9; * the incoming request doesn't have the same method.&#10;&#9; */" />
      <item value="                        .antMatchers(&quot;**/init/**&quot;)&#10;" />
      <item value="// If the pattern ends with {@code /**} and has no other wildcards or path&#10;&#9;&#9;&#9;// variables, then optimize to a sub-path match" />
      <item value="/**&#10;&#9; * Creates a matcher with the supplied pattern which will match the specified Http&#10;&#9; * method&#10;&#9; *&#10;&#9; * @param pattern the ant pattern to use for matching&#10;&#9; * @param httpMethod the HTTP method. The {@code matches} method will return false if&#10;&#9; * the incoming request doesn't doesn't have the same method.&#10;&#9; * @param caseSensitive true if the matcher should consider case, else false&#10;&#9; * @param urlPathHelper if non-null, will be used for extracting the path from the HttpServletRequest&#10;&#9; */" />
      <item value="case Sensitive" />
      <item value="extend" />
      <item value="/**&#10; * Indicates that an annotation type is automatically inherited.  If&#10; * an Inherited meta-annotation is present on an annotation type&#10; * declaration, and the user queries the annotation type on a class&#10; * declaration, and the class declaration has no annotation for this type,&#10; * then the class's superclass will automatically be queried for the&#10; * annotation type.  This process will be repeated until an annotation for this&#10; * type is found, or the top of the class hierarchy (Object)&#10; * is reached.  If no superclass has an annotation for this type, then&#10; * the query will indicate that the class in question has no such annotation.&#10; *&#10; * &lt;p&gt;Note that this meta-annotation type has no effect if the annotated&#10; * type is used to annotate anything other than a class.  Note also&#10; * that this meta-annotation only causes annotations to be inherited&#10; * from superclasses; annotations on implemented interfaces have no&#10; * effect.&#10; *&#10; * @author  Joshua Bloch&#10; * @since 1.5&#10; * @jls 9.6.3.3 @Inherited&#10; */" />
      <item value="Inherited" />
      <item value="Reactive" />
      <item value="Reactive User Details Service" />
      <item value="a consequence of a circular reference" />
      <item value="Autowiring by type from bean name 'taijiUserDetailServiceImpl' to bean named 'userService'" />
      <item value="2020-11-30 19:14:07.094 TRACE 30588 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Returning eagerly cached instance of singleton bean 'applicationSecurity' that is not fully initialized yet - a consequence of a circular reference&#10;" />
      <item value="Authority" />
      <item value="Fake content" />
      <item value="Registy" />
      <item value="Regist" />
      <item value="&#10;/**&#10; * Factory hook that allows for custom modification of new bean instances,&#10; * e.g. checking for marker interfaces or wrapping them with proxies.&#10; *&#10; * &lt;p&gt;ApplicationContexts can autodetect BeanPostProcessor beans in their&#10; * bean definitions and apply them to any beans subsequently created.&#10; * Plain bean factories allow for programmatic registration of post-processors,&#10; * applying to all beans created through this factory.&#10; *&#10; * &lt;p&gt;Typically, post-processors that populate beans via marker interfaces&#10; * or the like will implement {@link #postProcessBeforeInitialization},&#10; * while post-processors that wrap beans with proxies will normally&#10; * implement {@link #postProcessAfterInitialization}.&#10; *&#10; * @author Juergen Hoeller&#10; * @since 10.10.2003&#10; * @see InstantiationAwareBeanPostProcessor&#10; * @see DestructionAwareBeanPostProcessor&#10; * @see ConfigurableBeanFactory#addBeanPostProcessor&#10; * @see BeanFactoryPostProcessor&#10; */" />
      <item value="/*&#10; * Copyright 2002-2016 the original author or authors.&#10; *&#10; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10; * you may not use this file except in compliance with the License.&#10; * You may obtain a copy of the License at&#10; *&#10; *      https://www.apache.org/licenses/LICENSE-2.0&#10; *&#10; * Unless required by applicable law or agreed to in writing, software&#10; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10; * See the License for the specific language governing permissions and&#10; * limitations under the License.&#10; */" />
      <item value="/ Add protocol if not provided (prefilters might expect it)&#10;&#9;&#9;// Handle falsy url in the settings object (#10093: consistency with old signature)&#10;&#9;&#9;// We also use the url parameter if available" />
      <item value="Building a settings object" />
      <item value="Extending" />
      <item value="&#9;// Creates a full fledged settings object into target&#10;&#9;// with both ajaxSettings and settings fields.&#10;&#9;// If target is omitted, writes into ajaxSettings." />
      <item value="/**&#10;&#9; * Allows restricting access based upon the {@link HttpServletRequest} using&#10;&#9; *&#10;&#9; * &lt;h2&gt;Example Configurations&lt;/h2&gt;&#10;&#9; *&#10;&#9; * The most basic example is to configure all URLs to require the role &quot;ROLE_USER&quot;.&#10;&#9; * The configuration below requires authentication to every URL and will grant access&#10;&#9; * to both the user &quot;admin&quot; and &quot;user&quot;.&#10;&#9; *&#10;&#9; * &lt;pre&gt;&#10;&#9; * &amp;#064;Configuration&#10;&#9; * &amp;#064;EnableWebSecurity&#10;&#9; * public class AuthorizeUrlsSecurityConfig extends WebSecurityConfigurerAdapter {&#10;&#9; *&#10;&#9; * &#9;&amp;#064;Override&#10;&#9; * &#9;protected void configure(HttpSecurity http) throws Exception {&#10;&#9; * &#9;&#9;http.authorizeRequests().antMatchers(&amp;quot;/**&amp;quot;).hasRole(&amp;quot;USER&amp;quot;).and().formLogin();&#10;&#9; * &#9;}&#10;&#9; *&#10;&#9; * &#9;&amp;#064;Override&#10;&#9; * &#9;protected void configure(AuthenticationManagerBuilder auth) throws Exception {&#10;&#9; * &#9;&#9;auth.inMemoryAuthentication().withUser(&amp;quot;user&amp;quot;).password(&amp;quot;password&amp;quot;).roles(&amp;quot;USER&amp;quot;)&#10;&#9; * &#9;&#9;&#9;&#9;.and().withUser(&amp;quot;admin&amp;quot;).password(&amp;quot;password&amp;quot;).roles(&amp;quot;ADMIN&amp;quot;, &amp;quot;USER&amp;quot;);&#10;&#9; * &#9;}&#10;&#9; * }&#10;&#9; * &lt;/pre&gt;&#10;&#9; *&#10;&#9; * We can also configure multiple URLs. The configuration below requires&#10;&#9; * authentication to every URL and will grant access to URLs starting with /admin/ to&#10;&#9; * only the &quot;admin&quot; user. All other URLs either user can access.&#10;&#9; *&#10;&#9; * &lt;pre&gt;&#10;&#9; * &amp;#064;Configuration&#10;&#9; * &amp;#064;EnableWebSecurity&#10;&#9; * public class AuthorizeUrlsSecurityConfig extends WebSecurityConfigurerAdapter {&#10;&#9; *&#10;&#9; * &#9;&amp;#064;Override&#10;&#9; * &#9;protected void configure(HttpSecurity http) throws Exception {&#10;&#9; * &#9;&#9;http.authorizeRequests().antMatchers(&amp;quot;/admin/**&amp;quot;).hasRole(&amp;quot;ADMIN&amp;quot;)&#10;&#9; * &#9;&#9;&#9;&#9;.antMatchers(&amp;quot;/**&amp;quot;).hasRole(&amp;quot;USER&amp;quot;).and().formLogin();&#10;&#9; * &#9;}&#10;&#9; *&#10;&#9; * &#9;&amp;#064;Override&#10;&#9; * &#9;protected void configure(AuthenticationManagerBuilder auth) throws Exception {&#10;&#9; * &#9;&#9;auth.inMemoryAuthentication().withUser(&amp;quot;user&amp;quot;).password(&amp;quot;password&amp;quot;).roles(&amp;quot;USER&amp;quot;)&#10;&#9; * &#9;&#9;&#9;&#9;.and().withUser(&amp;quot;admin&amp;quot;).password(&amp;quot;password&amp;quot;).roles(&amp;quot;ADMIN&amp;quot;, &amp;quot;USER&amp;quot;);&#10;&#9; * &#9;}&#10;&#9; * }&#10;&#9; * &lt;/pre&gt;&#10;&#9; *&#10;&#9; * Note that the matchers are considered in order. Therefore, the following is invalid&#10;&#9; * because the first matcher matches every request and will never get to the second&#10;&#9; * mapping:&#10;&#9; *&#10;&#9; * &lt;pre&gt;&#10;&#9; * http.authorizeRequests().antMatchers(&amp;quot;/**&amp;quot;).hasRole(&amp;quot;USER&amp;quot;).antMatchers(&amp;quot;/admin/**&amp;quot;)&#10;&#9; * &#9;&#9;.hasRole(&amp;quot;ADMIN&amp;quot;)&#10;&#9; * &lt;/pre&gt;&#10;&#9; *&#10;&#9; * @see #requestMatcher(RequestMatcher)&#10;&#9; *&#10;&#9; * @return the {@link ExpressionUrlAuthorizationConfigurer} for further customizations&#10;&#9; * @throws Exception&#10;&#9; */" />
      <item value="exist Any Request Config" />
      <item value="current Is Any Request Config" />
      <item value="/* (non-Javadoc)&#10;&#9; * @see com.imooc.security.core.authorize.AuthorizeConfigManager#config(org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.ExpressionInterceptUrlRegistry)&#10;&#9; */" />
      <item value="Indicates the dependency is optional for use of this library. While the version of the dependency will be&#10;            taken into account for dependency calculation if the library is used elsewhere, it will not be passed on&#10;            transitively." />
      <item value="swtich" />
      <item value="encrypted Password" />
      <item value="cipher Password" />
      <item value="cipher" />
      <item value="密文密码" />
      <item value="密文" />
      <item value="en" />
      <item value="encrypt" />
      <item value="/**&#10;     * For circulatory partition, calculated value of target partition needs to be&#10;     * rotated to fit the partition range&#10;     */" />
      <item value="/**&#10;         * If target date is previous of start time of partition setting, shift&#10;         * the delta range between target and start date to be positive value&#10;         */" />
      <item value="/**&#10;             * For circulatory partition, calculated value of target partition needs to be&#10;             * rotated to fit the partition range&#10;             */" />
      <item value="Type safe sql support, plugin can recognize mybatis dynamic sql&#10;        Code Formatter&#10;        Generate mybatis crud code by Intellij database table or add a database connection&#10;        Generate mybatis sql based on mybatis interface method name like spring data jpa, with this, you don't have to write most sql for non join query support generate statement with if test&#10;        Database generate crud could generate multiple times when you add or delete columns, plugin will auto merge code&#10;        Full mybatis sql auto complete, recognize mybatis tag in xml, like where trim set include ect,provide sql completion after those tag&#10;        Jump from mybatis dao interface to mapper xml each other&#10;        Refactor for mybatis interface method name,refid,resultMap ect&#10;        Auto complete for mybatis param,if test,foreach,resultMap,refid in sql&#10;        Generate create table sql from java class&#10;        Mybatis Param refactor and inspection&#10;        Ognl support, if test when test ${ bind foreach collection, refactor and inspection and auto completion&#10;        Jump from refid resultMap to their definition, refactor their name as well&#10;        Generate page query by mapper interface method&#10;        Spring support for mybatis, inject mybatis mapper to spring bean,support SpringBoot&#10;        Refid,resultMap,keyProperty,property auto complete&#10;        Add @param for mapper method&#10;        Resultmap column complete and inspection by parse reference select statement&#10;        Auto map resultMap column and property&#10;        Generate mybatis mapper testcase from mybatis interface method by database connection, make you test method quicker&#10;        Full inspection for mybatis, like unused sql in xml, mapper method not have sql in xml, check if resultMap property is right ect&#10;&#10;        https://github.com/gejun123456/MyBatisCodeHelper-Pro to learn more.&#10;        How to use&#10;        view on https://github.com/gejun123456/MyBatisCodeHelper-Pro&#10;        qqGroup:914051156" />
      <item value="advice Number" />
      <item value="adjust Channel Number" />
      <item value="shuffler" />
      <item value="prepare" />
      <item value="Schedul" />
      <item value="/**&#10;     * Decrements the count of the latch, releasing all waiting threads if&#10;     * the count reaches zero.&#10;     *&#10;     * &lt;p&gt;If the current count is greater than zero then it is decremented.&#10;     * If the new count is zero then all waiting threads are re-enabled for&#10;     * thread scheduling purposes.&#10;     *&#10;     * &lt;p&gt;If the current count equals zero then nothing happens.&#10;     */" />
      <item value="Project distribution archive is produced under this module&#10;* **core:** &#10;Core implementation&#10;* **dbdialog:** &#10;Database dialog&#10;* **ui:** &#10;User interface&#10;* **engine:** &#10;PDI engine&#10;* **engine-ext:** &#10;PDI engine extensions&#10;* **[plugins:](plugins/README.md)** &#10;PDI core plugins&#10;* **integration:** &#10;Integration tests" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="121" />
        <entry key="ENGLISH" value="122" />
        <entry key="ROMANIAN" value="2" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="SLOVENIAN" value="2" />
        <entry key="TELUGU" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="keepFormat" value="true" />
    <option name="targetLanguageSelection" value="PRIMARY_LANGUAGE" />
  </component>
</application>